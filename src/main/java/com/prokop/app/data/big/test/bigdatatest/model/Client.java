/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.prokop.app.data.big.test.bigdatatest.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Client extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6297504977290283887L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Client\",\"namespace\":\"com.prokop.app.data.big.test.bigdatatest.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"boolean\"},{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"Gender\",\"symbols\":[\"male\",\"female\",\"unknown\"]}},{\"name\":\"last_purchases\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"age\",\"type\":[\"int\",\"null\"]},{\"name\":\"phone\",\"type\":[\"string\",\"null\"]},{\"name\":\"address\",\"type\":[\"string\",\"null\"]},{\"name\":\"total_purchase_amount\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Client> ENCODER =
      new BinaryMessageEncoder<Client>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Client> DECODER =
      new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Client> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Client> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Client> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Client to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Client from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Client instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Client fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private java.lang.CharSequence name;
   private boolean active;
   private com.prokop.app.data.big.test.bigdatatest.model.Gender gender;
   private java.util.List<java.lang.CharSequence> last_purchases;
   private java.lang.Integer age;
   private java.lang.CharSequence phone;
   private java.lang.CharSequence address;
   private java.lang.Double total_purchase_amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Client() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param active The new value for active
   * @param gender The new value for gender
   * @param last_purchases The new value for last_purchases
   * @param age The new value for age
   * @param phone The new value for phone
   * @param address The new value for address
   * @param total_purchase_amount The new value for total_purchase_amount
   */
  public Client(java.lang.Long id, java.lang.CharSequence name, java.lang.Boolean active, com.prokop.app.data.big.test.bigdatatest.model.Gender gender, java.util.List<java.lang.CharSequence> last_purchases, java.lang.Integer age, java.lang.CharSequence phone, java.lang.CharSequence address, java.lang.Double total_purchase_amount) {
    this.id = id;
    this.name = name;
    this.active = active;
    this.gender = gender;
    this.last_purchases = last_purchases;
    this.age = age;
    this.phone = phone;
    this.address = address;
    this.total_purchase_amount = total_purchase_amount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return active;
    case 3: return gender;
    case 4: return last_purchases;
    case 5: return age;
    case 6: return phone;
    case 7: return address;
    case 8: return total_purchase_amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: active = (java.lang.Boolean)value$; break;
    case 3: gender = (com.prokop.app.data.big.test.bigdatatest.model.Gender)value$; break;
    case 4: last_purchases = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: age = (java.lang.Integer)value$; break;
    case 6: phone = (java.lang.CharSequence)value$; break;
    case 7: address = (java.lang.CharSequence)value$; break;
    case 8: total_purchase_amount = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public com.prokop.app.data.big.test.bigdatatest.model.Gender getGender() {
    return gender;
  }


  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(com.prokop.app.data.big.test.bigdatatest.model.Gender value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'last_purchases' field.
   * @return The value of the 'last_purchases' field.
   */
  public java.util.List<java.lang.CharSequence> getLastPurchases() {
    return last_purchases;
  }


  /**
   * Sets the value of the 'last_purchases' field.
   * @param value the value to set.
   */
  public void setLastPurchases(java.util.List<java.lang.CharSequence> value) {
    this.last_purchases = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }


  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'total_purchase_amount' field.
   * @return The value of the 'total_purchase_amount' field.
   */
  public java.lang.Double getTotalPurchaseAmount() {
    return total_purchase_amount;
  }


  /**
   * Sets the value of the 'total_purchase_amount' field.
   * @param value the value to set.
   */
  public void setTotalPurchaseAmount(java.lang.Double value) {
    this.total_purchase_amount = value;
  }

  /**
   * Creates a new Client RecordBuilder.
   * @return A new Client RecordBuilder
   */
  public static com.prokop.app.data.big.test.bigdatatest.model.Client.Builder newBuilder() {
    return new com.prokop.app.data.big.test.bigdatatest.model.Client.Builder();
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Client RecordBuilder
   */
  public static com.prokop.app.data.big.test.bigdatatest.model.Client.Builder newBuilder(com.prokop.app.data.big.test.bigdatatest.model.Client.Builder other) {
    if (other == null) {
      return new com.prokop.app.data.big.test.bigdatatest.model.Client.Builder();
    } else {
      return new com.prokop.app.data.big.test.bigdatatest.model.Client.Builder(other);
    }
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Client instance.
   * @param other The existing instance to copy.
   * @return A new Client RecordBuilder
   */
  public static com.prokop.app.data.big.test.bigdatatest.model.Client.Builder newBuilder(com.prokop.app.data.big.test.bigdatatest.model.Client other) {
    if (other == null) {
      return new com.prokop.app.data.big.test.bigdatatest.model.Client.Builder();
    } else {
      return new com.prokop.app.data.big.test.bigdatatest.model.Client.Builder(other);
    }
  }

  /**
   * RecordBuilder for Client instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Client>
    implements org.apache.avro.data.RecordBuilder<Client> {

    private long id;
    private java.lang.CharSequence name;
    private boolean active;
    private com.prokop.app.data.big.test.bigdatatest.model.Gender gender;
    private java.util.List<java.lang.CharSequence> last_purchases;
    private java.lang.Integer age;
    private java.lang.CharSequence phone;
    private java.lang.CharSequence address;
    private java.lang.Double total_purchase_amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.prokop.app.data.big.test.bigdatatest.model.Client.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.active)) {
        this.active = data().deepCopy(fields()[2].schema(), other.active);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.gender)) {
        this.gender = data().deepCopy(fields()[3].schema(), other.gender);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.last_purchases)) {
        this.last_purchases = data().deepCopy(fields()[4].schema(), other.last_purchases);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.age)) {
        this.age = data().deepCopy(fields()[5].schema(), other.age);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.phone)) {
        this.phone = data().deepCopy(fields()[6].schema(), other.phone);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.address)) {
        this.address = data().deepCopy(fields()[7].schema(), other.address);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.total_purchase_amount)) {
        this.total_purchase_amount = data().deepCopy(fields()[8].schema(), other.total_purchase_amount);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Client instance
     * @param other The existing instance to copy.
     */
    private Builder(com.prokop.app.data.big.test.bigdatatest.model.Client other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.active)) {
        this.active = data().deepCopy(fields()[2].schema(), other.active);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gender)) {
        this.gender = data().deepCopy(fields()[3].schema(), other.gender);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.last_purchases)) {
        this.last_purchases = data().deepCopy(fields()[4].schema(), other.last_purchases);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.age)) {
        this.age = data().deepCopy(fields()[5].schema(), other.age);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.phone)) {
        this.phone = data().deepCopy(fields()[6].schema(), other.phone);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.address)) {
        this.address = data().deepCopy(fields()[7].schema(), other.address);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.total_purchase_amount)) {
        this.total_purchase_amount = data().deepCopy(fields()[8].schema(), other.total_purchase_amount);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setActive(boolean value) {
      validate(fields()[2], value);
      this.active = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearActive() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Gender getGender() {
      return gender;
    }


    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setGender(com.prokop.app.data.big.test.bigdatatest.model.Gender value) {
      validate(fields()[3], value);
      this.gender = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearGender() {
      gender = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_purchases' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLastPurchases() {
      return last_purchases;
    }


    /**
      * Sets the value of the 'last_purchases' field.
      * @param value The value of 'last_purchases'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setLastPurchases(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.last_purchases = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'last_purchases' field has been set.
      * @return True if the 'last_purchases' field has been set, false otherwise.
      */
    public boolean hasLastPurchases() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'last_purchases' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearLastPurchases() {
      last_purchases = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setAge(java.lang.Integer value) {
      validate(fields()[5], value);
      this.age = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearAge() {
      age = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }


    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.phone = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.address = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearAddress() {
      address = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_purchase_amount' field.
      * @return The value.
      */
    public java.lang.Double getTotalPurchaseAmount() {
      return total_purchase_amount;
    }


    /**
      * Sets the value of the 'total_purchase_amount' field.
      * @param value The value of 'total_purchase_amount'.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder setTotalPurchaseAmount(java.lang.Double value) {
      validate(fields()[8], value);
      this.total_purchase_amount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'total_purchase_amount' field has been set.
      * @return True if the 'total_purchase_amount' field has been set, false otherwise.
      */
    public boolean hasTotalPurchaseAmount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'total_purchase_amount' field.
      * @return This builder.
      */
    public com.prokop.app.data.big.test.bigdatatest.model.Client.Builder clearTotalPurchaseAmount() {
      total_purchase_amount = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Client build() {
      try {
        Client record = new Client();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.active = fieldSetFlags()[2] ? this.active : (java.lang.Boolean) defaultValue(fields()[2]);
        record.gender = fieldSetFlags()[3] ? this.gender : (com.prokop.app.data.big.test.bigdatatest.model.Gender) defaultValue(fields()[3]);
        record.last_purchases = fieldSetFlags()[4] ? this.last_purchases : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.age = fieldSetFlags()[5] ? this.age : (java.lang.Integer) defaultValue(fields()[5]);
        record.phone = fieldSetFlags()[6] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.address = fieldSetFlags()[7] ? this.address : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.total_purchase_amount = fieldSetFlags()[8] ? this.total_purchase_amount : (java.lang.Double) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Client>
    WRITER$ = (org.apache.avro.io.DatumWriter<Client>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Client>
    READER$ = (org.apache.avro.io.DatumReader<Client>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeBoolean(this.active);

    out.writeEnum(this.gender.ordinal());

    long size0 = this.last_purchases.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.last_purchases) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.age == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.age);
    }

    if (this.phone == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.phone);
    }

    if (this.address == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.address);
    }

    if (this.total_purchase_amount == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.total_purchase_amount);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.active = in.readBoolean();

      this.gender = com.prokop.app.data.big.test.bigdatatest.model.Gender.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.last_purchases;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("last_purchases").schema());
        this.last_purchases = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.age = null;
      } else {
        this.age = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.phone = null;
      } else {
        this.phone = in.readString(this.phone instanceof Utf8 ? (Utf8)this.phone : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.address = null;
      } else {
        this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.total_purchase_amount = null;
      } else {
        this.total_purchase_amount = in.readDouble();
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.active = in.readBoolean();
          break;

        case 3:
          this.gender = com.prokop.app.data.big.test.bigdatatest.model.Gender.values()[in.readEnum()];
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.last_purchases;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("last_purchases").schema());
            this.last_purchases = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.age = null;
          } else {
            this.age = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.phone = null;
          } else {
            this.phone = in.readString(this.phone instanceof Utf8 ? (Utf8)this.phone : null);
          }
          break;

        case 7:
          if (in.readIndex() != 0) {
            in.readNull();
            this.address = null;
          } else {
            this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
          }
          break;

        case 8:
          if (in.readIndex() != 0) {
            in.readNull();
            this.total_purchase_amount = null;
          } else {
            this.total_purchase_amount = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










